---
#
# This is the canonical configuration for the `README.md`
# Run `make readme` to rebuild the `README.md`
#

# Name of this project
name: github-commenter

# Logo for this project
#logo: docs/logo.png

# License of this project
license: "APACHE2"

# Canonical GitHub repo
github_repo: cloudposse/github-commenter

# Badges to display
badges:
  - name: "Build Status"
    image: "https://travis-ci.org/cloudposse/github-commenter.svg?branch=master"
    url: "https://travis-ci.org/cloudposse/github-commenter"
  - name: "Latest Release"
    image: "https://img.shields.io/github/release/cloudposse/github-commenter.svg"
    url: "https://github.com/cloudposse/github-commenter/releases/latest"
  - name: "Slack Community"
    image: "https://slack.cloudposse.com/badge.svg"
    url: "https://slack.cloudposse.com"

# Short description of this project
description: |-
  Command line utility for creating GitHub comments on Commits, Pull Request Reviews or Issues.

  * <https://developer.github.com/v3/repos/comments/#create-a-commit-comment>
  * <https://developer.github.com/v3/pulls/reviews/#create-a-pull-request-review>
  * <https://developer.github.com/v3/issues/comments/#create-a-comment>

related:
  - name: "github-status-updater"
    description: "Command line utility for updating GitHub commit statuses and enabling required status checks for pull requests"
    url: "https://github.com/cloudposse/github-status-updater"
  - name: "slack-notifier"
    description: "Command line utility to send messages with attachments to Slack channels via Incoming Webhooks"
    url: "https://github.com/cloudposse/slack-notifier"

screenshots:
  - name: "PR"
    description: "GitHub PR Review Comment"
    url: "images/github-pr-review-comment.png"

# How to use this project
usage: |-
  __NOTE__: Create a [GitHub token](https://help.github.com/articles/creating-an-access-token-for-command-line-use) with `repo:status` and `public_repo` scopes

  __NOTE__: The module accepts parameters as command-line arguments or as ENV variables (or any combination of command-line arguments and ENV vars).
  Command-line arguments take precedence over ENV vars


  | Command-line argument |  ENV var                 |  Description                                                                                                               |
  |:----------------------|:-------------------------|:---------------------------------------------------------------------------------------------------------------------------|
  | token                 | GITHUB_TOKEN             | Github access [token](https://help.github.com/articles/creating-an-access-token-for-command-line-use)                      |
  | owner                 | GITHUB_OWNER             | Github repository owner (_e.g._ `cloudposse`)                                                                              |
  | repo                  | GITHUB_REPO              | Github repository name (_e.g._ `github-commenter`)                                                                         |
  | type                  | GITHUB_COMMENT_TYPE      | Comment type: `commit`, `pr` or `issue`                                                                                    |
  | sha                   | GITHUB_COMMIT_SHA        | Commit SHA. Required when `type=commit`                                                                                    |
  | number                | GITHUB_PR_ISSUE_NUMBER   | Pull Request or Issue number. Required when `type=pr` or `type=issue`                                                      |
  | format                | GITHUB_COMMENT_FORMAT    | Comment format (optional). Supports `Go` [templates](https://golang.org/pkg/text/template): `My comment:<br/>{{.}}`         |
  | comment               | GITHUB_COMMENT           | Comment text. If neither `comment` nor `GITHUB_COMMENT` provided, will read from `stdin`                                   |


  __NOTE__: The module accepts the text of the comment from the command-line argument `comment`, from the ENV variable `GITHUB_COMMENT`, or from the standard input.
  Command-line argument takes precedence over ENV var, and ENV var takes precedence over standard input.
  Accepting comments from `stdin` allows using Unix pipes to send the output from another program as the input to the module

  ```sh
      cat comment.txt | github-commenter ...
  ```

  ```sh
      terraform plan 2>&1 | github-commenter -format "Output from `terraform plan`<br/>```{{.}}```"
  ```
examples: |-
  The module can be called directly or as a Docker container.

  ### Build the Go program locally

  ```sh
  go get

  CGO_ENABLED=0 go build -v -o "./dist/bin/github-commenter" *.go
  ```

  ### Run locally with ENV vars
  [run_locally_with_env_vars.sh](examples/run_locally_with_env_vars.sh)

  ```sh
  export GITHUB_TOKEN=XXXXXXXXXXXXXXXX
  export GITHUB_OWNER=cloudposse
  export GITHUB_REPO=github-commenter
  export GITHUB_COMMENT_TYPE=pr
  export GITHUB_PR_ISSUE_NUMBER=1
  export GITHUB_COMMENT_FORMAT="My comment:<br/>{{.}}"
  export GITHUB_COMMENT="+1 LGTM"

  ./dist/bin/github-commenter
  ```

  ### Run locally with command-line arguments
  [run_locally_with_command_line_args.sh](examples/run_locally_with_command_line_args.sh)

  ```sh
  ./dist/bin/github-commenter \
          -token XXXXXXXXXXXXXXXX \
          -owner cloudposse \
          -repo github-commenter \
          -type pr \
          -number 1 \
          -format "My comment:<br/>{{.}}" \
          -comment "+1 LGTM"
  ```

  ### Build the Docker image
  __NOTE__: it will download all `Go` dependencies and then build the program inside the container (see [`Dockerfile`](Dockerfile))


  ```sh
  docker build --tag github-commenter  --no-cache=true .
  ```

  ### Run in a Docker container with ENV vars
  [run_docker_with_env_vars.sh](examples/run_docker_with_env_vars.sh)

  ```sh
  docker run -i --rm \
          -e GITHUB_TOKEN=XXXXXXXXXXXXXXXX \
          -e GITHUB_OWNER=cloudposse \
          -e GITHUB_REPO=github-commenter \
          -e GITHUB_COMMENT_TYPE=pr \
          -e GITHUB_PR_ISSUE_NUMBER=1 \
          -e GITHUB_COMMENT_FORMAT="My comment:<br/>{{.}}" \
          -e GITHUB_COMMENT="+1 LGTM" \
          github-commenter
  ```

  ### Run with Docker
  Run `github-commenter` in a Docker container with local ENV vars propagated into the container's environment.
  [run_docker_with_local_env_vars.sh](examples/run_docker_with_local_env_vars.sh)

  ```sh
  export GITHUB_TOKEN=XXXXXXXXXXXXXXXX
  export GITHUB_OWNER=cloudposse
  export GITHUB_REPO=github-commenter
  export GITHUB_COMMENT_TYPE=pr
  export GITHUB_PR_ISSUE_NUMBER=1
  export GITHUB_COMMENT_FORMAT="My comment:<br/>{{.}}"
  export GITHUB_COMMENT="+1 LGTM"

  docker run -i --rm \
          -e GITHUB_TOKEN \
          -e GITHUB_OWNER \
          -e GITHUB_REPO \
          -e GITHUB_COMMENT_TYPE \
          -e GITHUB_PR_ISSUE_NUMBER \
          -e GITHUB_COMMENT_FORMAT \
          -e GITHUB_COMMENT \
          github-commenter
  ```



  ### Run with Docker using Env File
  Run the `github-commenter` in a Docker container with ENV vars declared in a file.
    [run_docker_with_env_vars_file.sh](examples/run_docker_with_env_vars_file.sh)

  ```sh
  docker run -i --rm --env-file ./example.env github-commenter
  ```

# Contributors to this project
contributors:
  - name: "Andriy Knysh"
    github: "aknysh"